generator client {
  provider = "prisma-client-js"
  //output   = "node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advantages {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parent_name          String?
  name                 String
  description          String
  type                 type
  level                Int
  for                  forWhom
  clan_req             String?                @db.Uuid
  sect_req             String?                @db.Uuid
  clans                clans?                 @relation(fields: [clan_req], references: [id], onUpdate: NoAction, map: "advantages_clan_req_clans_id_fk")
  sects                sects?                 @relation(fields: [sect_req], references: [id], onUpdate: NoAction, map: "advantages_sect_req_sects_id_fk")
  character_advantages character_advantages[]
}

model alchemy_powers {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  description              String?
  ingridients              String?
  activation               String?
  dice_pool                String?
  system                   String?
  duration                 String?
  level                    Int?
  character_alchemy_powers character_alchemy_powers[]
}

model attributes {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  description          String
  category             category
  character_attributes character_attributes[]
}

model blood_potency {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  level                    Int
  description              String?
  blood_surge              String?
  damage_mend              String?
  power_bonus              String?
  rc_reroll                String?
  bane_severity            Int?
  feeding_penalty          String?
  character_bloodpotencies character_bloodpotencies[]
}

model char_groups {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String        @db.Uuid
  parent_id         String?       @db.Uuid
  name              String
  description       String
  char_groups       char_groups?  @relation("char_groupsTochar_groups", fields: [parent_id], references: [id], onUpdate: NoAction, map: "char_groups_parent_id_char_groups_id_fk")
  other_char_groups char_groups[] @relation("char_groupsTochar_groups")
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "char_groups_user_id_users_id_fk")
  characters        characters[]
}

model character_advantages {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id      String     @db.Uuid
  advantage_id String     @db.Uuid
  advantages   advantages @relation(fields: [advantage_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_advantages_advantage_id_advantages_id_fk")
  characters   characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_advantages_char_id_characters_id_fk")
}

model character_alchemy_powers {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id          String         @db.Uuid
  alchemy_power_id String         @db.Uuid
  alchemy_powers   alchemy_powers @relation(fields: [alchemy_power_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_alchemy_powers_alchemy_power_id_alchemy_powers_id_fk")
  characters       characters     @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_alchemy_powers_char_id_characters_id_fk")
}

model character_attributes {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id      String     @db.Uuid
  attribute_id String     @db.Uuid
  level        Int        @default(0)
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_attributes_attribute_id_attributes_id_fk")
  characters   characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_attributes_char_id_characters_id_fk")
}

model character_bloodpotencies {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id             String            @db.Uuid
  blood_potency_level String?           @db.Uuid
  blood_surge         String?
  bane_severity       Int?              @default(0)
  power_bonus         String?
  feeding_penalty     String?
  mend_amount         Int?
  rc_reroll           String?
  clane_bane          String?           @db.Uuid
  clan_compulsion     String?           @db.Uuid
  blood_potency       blood_potency?    @relation(fields: [blood_potency_level], references: [id], onUpdate: NoAction, map: "character_bloodpotencies_blood_potency_level_blood_potency_id_f")
  characters          characters        @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_bloodpotencies_char_id_characters_id_fk")
  clan_compulsions    clan_compulsions? @relation(fields: [clan_compulsion], references: [id], onUpdate: NoAction, map: "character_bloodpotencies_clan_compulsion_clan_compulsions_id_fk")
  clan_banes          clan_banes?       @relation(fields: [clane_bane], references: [id], onUpdate: NoAction, map: "character_bloodpotencies_clane_bane_clan_banes_id_fk")
}

model character_discipline_powers {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id             String            @db.Uuid
  discipline_power_id String            @db.Uuid
  characters          characters        @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_discipline_powers_char_id_characters_id_fk")
  discipline_powers   discipline_powers @relation(fields: [discipline_power_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_discipline_powers_discipline_power_id_discipline_powe")
}

model character_disciplines {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id       String      @db.Uuid
  discipline_id String      @db.Uuid
  characters    characters  @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_disciplines_char_id_characters_id_fk")
  disciplines   disciplines @relation(fields: [discipline_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_disciplines_discipline_id_disciplines_id_fk")
}

model character_healths {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id             String     @db.Uuid
  max_health          Int
  current_aggravated  Int        @default(0)
  current_superficial Int        @default(0)
  characters          characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_healths_char_id_characters_id_fk")
}

model character_humanity {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id     String     @db.Uuid
  level       Int        @default(0)
  stain_count Int        @default(0)
  characters  characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_humanity_char_id_characters_id_fk")
}

model character_profile {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id      String     @db.Uuid
  description  String
  birthday     DateTime   @db.Timestamptz(6)
  notes        String?
  age          Int
  embraced_at  DateTime   @db.Timestamptz(6)
  apparent_age Int
  concept      String?
  characters   characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_profile_char_id_characters_id_fk")
}

model character_rituals {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id    String     @db.Uuid
  ritual_id  String     @db.Uuid
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_rituals_char_id_characters_id_fk")
  rituals    rituals    @relation(fields: [ritual_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_rituals_ritual_id_rituals_id_fk")
}

model character_skills {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id    String     @db.Uuid
  skill_id   String     @db.Uuid
  level      Int        @default(0)
  characters characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_skills_char_id_characters_id_fk")
  skills     skills     @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_skills_skill_id_skills_id_fk")
}

model character_specialties {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id        String     @db.Uuid
  skill_id       String     @db.Uuid
  specialty_name String
  characters     characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_specialties_char_id_characters_id_fk")
  skills         skills     @relation(fields: [skill_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "character_specialties_skill_id_skills_id_fk")
}

model character_willpowers {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  char_id             String     @db.Uuid
  max_willpower       Int
  current_aggravated  Int        @default(0)
  current_superficial Int        @default(0)
  characters          characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "character_willpowers_char_id_characters_id_fk")
}

model characters {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                     String                        @db.Uuid
  name                        String
  clan_id                     String?                       @db.Uuid
  clan_bane                   String?                       @db.Uuid
  clan_compulsion             String?                       @db.Uuid
  sect_id                     String?                       @db.Uuid
  player                      String
  predator_type               String                        @db.Uuid
  generation                  Int
  chronicle_id                String?                       @db.Uuid
  custom_chronicle            String?
  ambition                    String
  desire                      String
  sire                        String
  total_experience            Int                           @default(0)
  chronicle_tenets            String
  group_id                    String                        @db.Uuid
  type                        Entity                        @default(Vampire)
  character_advantages        character_advantages[]
  character_alchemy_powers    character_alchemy_powers[]
  character_attributes        character_attributes[]
  character_bloodpotencies    character_bloodpotencies[]
  character_discipline_powers character_discipline_powers[]
  character_disciplines       character_disciplines[]
  character_healths           character_healths[]
  character_humanity          character_humanity[]
  character_profile           character_profile[]
  character_rituals           character_rituals[]
  character_skills            character_skills[]
  character_specialties       character_specialties[]
  character_willpowers        character_willpowers[]
  chronicles                  chronicles?                   @relation(fields: [chronicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "characters_chronicle_id_chronicles_id_fk")
  clan_banes                  clan_banes?                   @relation(fields: [clan_bane], references: [id], onUpdate: NoAction, map: "characters_clan_bane_clan_banes_id_fk")
  clan_compulsions            clan_compulsions?             @relation(fields: [clan_compulsion], references: [id], onUpdate: NoAction, map: "characters_clan_compulsion_clan_compulsions_id_fk")
  clans                       clans?                        @relation(fields: [clan_id], references: [id], onUpdate: NoAction, map: "characters_clan_id_clans_id_fk")
  char_groups                 char_groups                   @relation(fields: [group_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "characters_group_id_char_groups_id_fk")
  predator_types              predator_types                @relation(fields: [predator_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "characters_predator_type_predator_types_id_fk")
  sects                       sects?                        @relation(fields: [sect_id], references: [id], onUpdate: NoAction, map: "characters_sect_id_sects_id_fk")
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "characters_user_id_users_id_fk")
  exp_logs                    exp_logs[]
}

model chronicles {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String       @db.Uuid
  name        String
  description String
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime     @default(now()) @db.Timestamptz(6)
  characters  characters[]
  users       users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chronicles_user_id_users_id_fk")
}

model clan_banes {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  clan_id                  String                     @db.Uuid
  description              String
  character_bloodpotencies character_bloodpotencies[]
  characters               characters[]
  clans                    clans                      @relation(fields: [clan_id], references: [id], onUpdate: NoAction, map: "clan_banes_clan_id_clans_id_fk")
}

model clan_compulsions {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  clan_id                  String                     @db.Uuid
  description              String
  character_bloodpotencies character_bloodpotencies[]
  characters               characters[]
  clans                    clans                      @relation(fields: [clan_id], references: [id], onUpdate: NoAction, map: "clan_compulsions_clan_id_clans_id_fk")
}

model clans {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String
  advantages       advantages[]
  characters       characters[]
  clan_banes       clan_banes[]
  clan_compulsions clan_compulsions[]
}

model discipline_powers {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discipline_id               String                        @db.Uuid
  name                        String
  level                       Int
  description                 String
  dice_pool                   String
  cost                        String
  prerequisites               String
  amalgam                     String
  system                      String
  duration                    String
  character_discipline_powers character_discipline_powers[]
  disciplines                 disciplines                   @relation(fields: [discipline_id], references: [id], onUpdate: NoAction, map: "discipline_powers_discipline_id_disciplines_id_fk")
}

model disciplines {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String
  nicknames             String
  characteristics       String
  type                  String
  masquerade_threat     String
  blood_resonance       String
  character_disciplines character_disciplines[]
  discipline_powers     discipline_powers[]
}

model exp_logs {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String     @db.Uuid
  char_id     String     @db.Uuid
  section     String?
  name        String?
  prev_level  Int?
  new_level   Int?
  expanditure Int?
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  characters  characters @relation(fields: [char_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "exp_logs_char_id_characters_id_fk")
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "exp_logs_user_id_users_id_fk")
}

model humanity {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  level       Int
}

model predator_types {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  dice_pool   String
  benefits    String
  characters  characters[]
}

model rituals {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String
  ingridients       String
  process           String
  system            String
  level             Int
  character_rituals character_rituals[]
}

model sects {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  advantages  advantages[]
  characters  characters[]
}

model skills {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String
  character_skills      character_skills[]
  character_specialties character_specialties[]
}

model users {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerk_user_id String        @unique(map: "users_clerk_user_id_unique")
  email         String        @unique(map: "users_email_unique")
  name          String
  image_url     String?
  deleted_at    DateTime?     @db.Timestamptz(6)
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime      @default(now()) @db.Timestamptz(6)
  char_groups   char_groups[]
  characters    characters[]
  chronicles    chronicles[]
  exp_logs      exp_logs[]
}

enum Entity {
  Vampire
  Ghoul
  Mortal
  Hunter
}

enum category {
  Physical
  Social
  Mental
}

enum forWhom {
  Ghoul
  Vampire
  All
}

enum type {
  Merit
  Flaw
  Loresheet
  Background
}
